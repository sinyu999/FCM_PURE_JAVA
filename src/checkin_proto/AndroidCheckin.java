// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: android_checkin.proto

package checkin_proto;

public final class AndroidCheckin {
  private AndroidCheckin() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * <pre>
   * enum values correspond to the type of device.
   * Used in the AndroidCheckinProto and Device proto.
   * </pre>
   *
   * Protobuf enum {@code checkin_proto.DeviceType}
   */
  public enum DeviceType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <pre>
     * Android Device
     * </pre>
     *
     * <code>DEVICE_ANDROID_OS = 1;</code>
     */
    DEVICE_ANDROID_OS(1),
    /**
     * <pre>
     * Apple IOS device
     * </pre>
     *
     * <code>DEVICE_IOS_OS = 2;</code>
     */
    DEVICE_IOS_OS(2),
    /**
     * <pre>
     * Chrome browser - Not Chrome OS.  No hardware records.
     * </pre>
     *
     * <code>DEVICE_CHROME_BROWSER = 3;</code>
     */
    DEVICE_CHROME_BROWSER(3),
    /**
     * <pre>
     * Chrome OS
     * </pre>
     *
     * <code>DEVICE_CHROME_OS = 4;</code>
     */
    DEVICE_CHROME_OS(4),
    ;

    /**
     * <pre>
     * Android Device
     * </pre>
     *
     * <code>DEVICE_ANDROID_OS = 1;</code>
     */
    public static final int DEVICE_ANDROID_OS_VALUE = 1;
    /**
     * <pre>
     * Apple IOS device
     * </pre>
     *
     * <code>DEVICE_IOS_OS = 2;</code>
     */
    public static final int DEVICE_IOS_OS_VALUE = 2;
    /**
     * <pre>
     * Chrome browser - Not Chrome OS.  No hardware records.
     * </pre>
     *
     * <code>DEVICE_CHROME_BROWSER = 3;</code>
     */
    public static final int DEVICE_CHROME_BROWSER_VALUE = 3;
    /**
     * <pre>
     * Chrome OS
     * </pre>
     *
     * <code>DEVICE_CHROME_OS = 4;</code>
     */
    public static final int DEVICE_CHROME_OS_VALUE = 4;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DeviceType valueOf(int value) {
      return forNumber(value);
    }

    public static DeviceType forNumber(int value) {
      switch (value) {
        case 1: return DEVICE_ANDROID_OS;
        case 2: return DEVICE_IOS_OS;
        case 3: return DEVICE_CHROME_BROWSER;
        case 4: return DEVICE_CHROME_OS;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DeviceType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DeviceType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DeviceType>() {
            public DeviceType findValueByNumber(int number) {
              return DeviceType.forNumber(number);
            }
          };

    private final int value;

    private DeviceType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:checkin_proto.DeviceType)
  }

  public interface ChromeBuildProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:checkin_proto.ChromeBuildProto)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The platform of the device.
     * </pre>
     *
     * <code>optional .checkin_proto.ChromeBuildProto.Platform platform = 1;</code>
     */
    boolean hasPlatform();
    /**
     * <pre>
     * The platform of the device.
     * </pre>
     *
     * <code>optional .checkin_proto.ChromeBuildProto.Platform platform = 1;</code>
     */
    checkin_proto.AndroidCheckin.ChromeBuildProto.Platform getPlatform();

    /**
     * <pre>
     * The Chrome instance's version.
     * </pre>
     *
     * <code>optional string chrome_version = 2;</code>
     */
    boolean hasChromeVersion();
    /**
     * <pre>
     * The Chrome instance's version.
     * </pre>
     *
     * <code>optional string chrome_version = 2;</code>
     */
    java.lang.String getChromeVersion();
    /**
     * <pre>
     * The Chrome instance's version.
     * </pre>
     *
     * <code>optional string chrome_version = 2;</code>
     */
    com.google.protobuf.ByteString
        getChromeVersionBytes();

    /**
     * <pre>
     * The Channel (build type) of Chrome.
     * </pre>
     *
     * <code>optional .checkin_proto.ChromeBuildProto.Channel channel = 3;</code>
     */
    boolean hasChannel();
    /**
     * <pre>
     * The Channel (build type) of Chrome.
     * </pre>
     *
     * <code>optional .checkin_proto.ChromeBuildProto.Channel channel = 3;</code>
     */
    checkin_proto.AndroidCheckin.ChromeBuildProto.Channel getChannel();
  }
  /**
   * <pre>
   * Build characteristics unique to the Chrome browser, and Chrome OS
   * </pre>
   *
   * Protobuf type {@code checkin_proto.ChromeBuildProto}
   */
  public  static final class ChromeBuildProto extends
      com.google.protobuf.GeneratedMessageLite<
          ChromeBuildProto, ChromeBuildProto.Builder> implements
      // @@protoc_insertion_point(message_implements:checkin_proto.ChromeBuildProto)
      ChromeBuildProtoOrBuilder {
    private ChromeBuildProto() {
      platform_ = 1;
      chromeVersion_ = "";
      channel_ = 1;
    }
    /**
     * Protobuf enum {@code checkin_proto.ChromeBuildProto.Platform}
     */
    public enum Platform
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>PLATFORM_WIN = 1;</code>
       */
      PLATFORM_WIN(1),
      /**
       * <code>PLATFORM_MAC = 2;</code>
       */
      PLATFORM_MAC(2),
      /**
       * <code>PLATFORM_LINUX = 3;</code>
       */
      PLATFORM_LINUX(3),
      /**
       * <code>PLATFORM_CROS = 4;</code>
       */
      PLATFORM_CROS(4),
      /**
       * <code>PLATFORM_IOS = 5;</code>
       */
      PLATFORM_IOS(5),
      /**
       * <pre>
       * Just a placeholder. Likely don't need it due to the presence of the
       * Android GCM on phone/tablet devices.
       * </pre>
       *
       * <code>PLATFORM_ANDROID = 6;</code>
       */
      PLATFORM_ANDROID(6),
      ;

      /**
       * <code>PLATFORM_WIN = 1;</code>
       */
      public static final int PLATFORM_WIN_VALUE = 1;
      /**
       * <code>PLATFORM_MAC = 2;</code>
       */
      public static final int PLATFORM_MAC_VALUE = 2;
      /**
       * <code>PLATFORM_LINUX = 3;</code>
       */
      public static final int PLATFORM_LINUX_VALUE = 3;
      /**
       * <code>PLATFORM_CROS = 4;</code>
       */
      public static final int PLATFORM_CROS_VALUE = 4;
      /**
       * <code>PLATFORM_IOS = 5;</code>
       */
      public static final int PLATFORM_IOS_VALUE = 5;
      /**
       * <pre>
       * Just a placeholder. Likely don't need it due to the presence of the
       * Android GCM on phone/tablet devices.
       * </pre>
       *
       * <code>PLATFORM_ANDROID = 6;</code>
       */
      public static final int PLATFORM_ANDROID_VALUE = 6;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Platform valueOf(int value) {
        return forNumber(value);
      }

      public static Platform forNumber(int value) {
        switch (value) {
          case 1: return PLATFORM_WIN;
          case 2: return PLATFORM_MAC;
          case 3: return PLATFORM_LINUX;
          case 4: return PLATFORM_CROS;
          case 5: return PLATFORM_IOS;
          case 6: return PLATFORM_ANDROID;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Platform>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Platform> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Platform>() {
              public Platform findValueByNumber(int number) {
                return Platform.forNumber(number);
              }
            };

      private final int value;

      private Platform(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:checkin_proto.ChromeBuildProto.Platform)
    }

    /**
     * Protobuf enum {@code checkin_proto.ChromeBuildProto.Channel}
     */
    public enum Channel
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>CHANNEL_STABLE = 1;</code>
       */
      CHANNEL_STABLE(1),
      /**
       * <code>CHANNEL_BETA = 2;</code>
       */
      CHANNEL_BETA(2),
      /**
       * <code>CHANNEL_DEV = 3;</code>
       */
      CHANNEL_DEV(3),
      /**
       * <code>CHANNEL_CANARY = 4;</code>
       */
      CHANNEL_CANARY(4),
      /**
       * <pre>
       * for tip of tree or custom builds
       * </pre>
       *
       * <code>CHANNEL_UNKNOWN = 5;</code>
       */
      CHANNEL_UNKNOWN(5),
      ;

      /**
       * <code>CHANNEL_STABLE = 1;</code>
       */
      public static final int CHANNEL_STABLE_VALUE = 1;
      /**
       * <code>CHANNEL_BETA = 2;</code>
       */
      public static final int CHANNEL_BETA_VALUE = 2;
      /**
       * <code>CHANNEL_DEV = 3;</code>
       */
      public static final int CHANNEL_DEV_VALUE = 3;
      /**
       * <code>CHANNEL_CANARY = 4;</code>
       */
      public static final int CHANNEL_CANARY_VALUE = 4;
      /**
       * <pre>
       * for tip of tree or custom builds
       * </pre>
       *
       * <code>CHANNEL_UNKNOWN = 5;</code>
       */
      public static final int CHANNEL_UNKNOWN_VALUE = 5;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Channel valueOf(int value) {
        return forNumber(value);
      }

      public static Channel forNumber(int value) {
        switch (value) {
          case 1: return CHANNEL_STABLE;
          case 2: return CHANNEL_BETA;
          case 3: return CHANNEL_DEV;
          case 4: return CHANNEL_CANARY;
          case 5: return CHANNEL_UNKNOWN;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Channel>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Channel> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Channel>() {
              public Channel findValueByNumber(int number) {
                return Channel.forNumber(number);
              }
            };

      private final int value;

      private Channel(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:checkin_proto.ChromeBuildProto.Channel)
    }

    private int bitField0_;
    public static final int PLATFORM_FIELD_NUMBER = 1;
    private int platform_;
    /**
     * <pre>
     * The platform of the device.
     * </pre>
     *
     * <code>optional .checkin_proto.ChromeBuildProto.Platform platform = 1;</code>
     */
    public boolean hasPlatform() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * The platform of the device.
     * </pre>
     *
     * <code>optional .checkin_proto.ChromeBuildProto.Platform platform = 1;</code>
     */
    public checkin_proto.AndroidCheckin.ChromeBuildProto.Platform getPlatform() {
      checkin_proto.AndroidCheckin.ChromeBuildProto.Platform result = checkin_proto.AndroidCheckin.ChromeBuildProto.Platform.forNumber(platform_);
      return result == null ? checkin_proto.AndroidCheckin.ChromeBuildProto.Platform.PLATFORM_WIN : result;
    }
    /**
     * <pre>
     * The platform of the device.
     * </pre>
     *
     * <code>optional .checkin_proto.ChromeBuildProto.Platform platform = 1;</code>
     */
    private void setPlatform(checkin_proto.AndroidCheckin.ChromeBuildProto.Platform value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      platform_ = value.getNumber();
    }
    /**
     * <pre>
     * The platform of the device.
     * </pre>
     *
     * <code>optional .checkin_proto.ChromeBuildProto.Platform platform = 1;</code>
     */
    private void clearPlatform() {
      bitField0_ = (bitField0_ & ~0x00000001);
      platform_ = 1;
    }

    public static final int CHROME_VERSION_FIELD_NUMBER = 2;
    private java.lang.String chromeVersion_;
    /**
     * <pre>
     * The Chrome instance's version.
     * </pre>
     *
     * <code>optional string chrome_version = 2;</code>
     */
    public boolean hasChromeVersion() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * The Chrome instance's version.
     * </pre>
     *
     * <code>optional string chrome_version = 2;</code>
     */
    public java.lang.String getChromeVersion() {
      return chromeVersion_;
    }
    /**
     * <pre>
     * The Chrome instance's version.
     * </pre>
     *
     * <code>optional string chrome_version = 2;</code>
     */
    public com.google.protobuf.ByteString
        getChromeVersionBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(chromeVersion_);
    }
    /**
     * <pre>
     * The Chrome instance's version.
     * </pre>
     *
     * <code>optional string chrome_version = 2;</code>
     */
    private void setChromeVersion(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      chromeVersion_ = value;
    }
    /**
     * <pre>
     * The Chrome instance's version.
     * </pre>
     *
     * <code>optional string chrome_version = 2;</code>
     */
    private void clearChromeVersion() {
      bitField0_ = (bitField0_ & ~0x00000002);
      chromeVersion_ = getDefaultInstance().getChromeVersion();
    }
    /**
     * <pre>
     * The Chrome instance's version.
     * </pre>
     *
     * <code>optional string chrome_version = 2;</code>
     */
    private void setChromeVersionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      chromeVersion_ = value.toStringUtf8();
    }

    public static final int CHANNEL_FIELD_NUMBER = 3;
    private int channel_;
    /**
     * <pre>
     * The Channel (build type) of Chrome.
     * </pre>
     *
     * <code>optional .checkin_proto.ChromeBuildProto.Channel channel = 3;</code>
     */
    public boolean hasChannel() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * The Channel (build type) of Chrome.
     * </pre>
     *
     * <code>optional .checkin_proto.ChromeBuildProto.Channel channel = 3;</code>
     */
    public checkin_proto.AndroidCheckin.ChromeBuildProto.Channel getChannel() {
      checkin_proto.AndroidCheckin.ChromeBuildProto.Channel result = checkin_proto.AndroidCheckin.ChromeBuildProto.Channel.forNumber(channel_);
      return result == null ? checkin_proto.AndroidCheckin.ChromeBuildProto.Channel.CHANNEL_STABLE : result;
    }
    /**
     * <pre>
     * The Channel (build type) of Chrome.
     * </pre>
     *
     * <code>optional .checkin_proto.ChromeBuildProto.Channel channel = 3;</code>
     */
    private void setChannel(checkin_proto.AndroidCheckin.ChromeBuildProto.Channel value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      channel_ = value.getNumber();
    }
    /**
     * <pre>
     * The Channel (build type) of Chrome.
     * </pre>
     *
     * <code>optional .checkin_proto.ChromeBuildProto.Channel channel = 3;</code>
     */
    private void clearChannel() {
      bitField0_ = (bitField0_ & ~0x00000004);
      channel_ = 1;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, platform_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeString(2, getChromeVersion());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, channel_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, platform_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getChromeVersion());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, channel_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static checkin_proto.AndroidCheckin.ChromeBuildProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static checkin_proto.AndroidCheckin.ChromeBuildProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static checkin_proto.AndroidCheckin.ChromeBuildProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static checkin_proto.AndroidCheckin.ChromeBuildProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static checkin_proto.AndroidCheckin.ChromeBuildProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static checkin_proto.AndroidCheckin.ChromeBuildProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static checkin_proto.AndroidCheckin.ChromeBuildProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static checkin_proto.AndroidCheckin.ChromeBuildProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static checkin_proto.AndroidCheckin.ChromeBuildProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static checkin_proto.AndroidCheckin.ChromeBuildProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static checkin_proto.AndroidCheckin.ChromeBuildProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static checkin_proto.AndroidCheckin.ChromeBuildProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(checkin_proto.AndroidCheckin.ChromeBuildProto prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Build characteristics unique to the Chrome browser, and Chrome OS
     * </pre>
     *
     * Protobuf type {@code checkin_proto.ChromeBuildProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          checkin_proto.AndroidCheckin.ChromeBuildProto, Builder> implements
        // @@protoc_insertion_point(builder_implements:checkin_proto.ChromeBuildProto)
        checkin_proto.AndroidCheckin.ChromeBuildProtoOrBuilder {
      // Construct using checkin_proto.AndroidCheckin.ChromeBuildProto.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The platform of the device.
       * </pre>
       *
       * <code>optional .checkin_proto.ChromeBuildProto.Platform platform = 1;</code>
       */
      public boolean hasPlatform() {
        return instance.hasPlatform();
      }
      /**
       * <pre>
       * The platform of the device.
       * </pre>
       *
       * <code>optional .checkin_proto.ChromeBuildProto.Platform platform = 1;</code>
       */
      public checkin_proto.AndroidCheckin.ChromeBuildProto.Platform getPlatform() {
        return instance.getPlatform();
      }
      /**
       * <pre>
       * The platform of the device.
       * </pre>
       *
       * <code>optional .checkin_proto.ChromeBuildProto.Platform platform = 1;</code>
       */
      public Builder setPlatform(checkin_proto.AndroidCheckin.ChromeBuildProto.Platform value) {
        copyOnWrite();
        instance.setPlatform(value);
        return this;
      }
      /**
       * <pre>
       * The platform of the device.
       * </pre>
       *
       * <code>optional .checkin_proto.ChromeBuildProto.Platform platform = 1;</code>
       */
      public Builder clearPlatform() {
        copyOnWrite();
        instance.clearPlatform();
        return this;
      }

      /**
       * <pre>
       * The Chrome instance's version.
       * </pre>
       *
       * <code>optional string chrome_version = 2;</code>
       */
      public boolean hasChromeVersion() {
        return instance.hasChromeVersion();
      }
      /**
       * <pre>
       * The Chrome instance's version.
       * </pre>
       *
       * <code>optional string chrome_version = 2;</code>
       */
      public java.lang.String getChromeVersion() {
        return instance.getChromeVersion();
      }
      /**
       * <pre>
       * The Chrome instance's version.
       * </pre>
       *
       * <code>optional string chrome_version = 2;</code>
       */
      public com.google.protobuf.ByteString
          getChromeVersionBytes() {
        return instance.getChromeVersionBytes();
      }
      /**
       * <pre>
       * The Chrome instance's version.
       * </pre>
       *
       * <code>optional string chrome_version = 2;</code>
       */
      public Builder setChromeVersion(
          java.lang.String value) {
        copyOnWrite();
        instance.setChromeVersion(value);
        return this;
      }
      /**
       * <pre>
       * The Chrome instance's version.
       * </pre>
       *
       * <code>optional string chrome_version = 2;</code>
       */
      public Builder clearChromeVersion() {
        copyOnWrite();
        instance.clearChromeVersion();
        return this;
      }
      /**
       * <pre>
       * The Chrome instance's version.
       * </pre>
       *
       * <code>optional string chrome_version = 2;</code>
       */
      public Builder setChromeVersionBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setChromeVersionBytes(value);
        return this;
      }

      /**
       * <pre>
       * The Channel (build type) of Chrome.
       * </pre>
       *
       * <code>optional .checkin_proto.ChromeBuildProto.Channel channel = 3;</code>
       */
      public boolean hasChannel() {
        return instance.hasChannel();
      }
      /**
       * <pre>
       * The Channel (build type) of Chrome.
       * </pre>
       *
       * <code>optional .checkin_proto.ChromeBuildProto.Channel channel = 3;</code>
       */
      public checkin_proto.AndroidCheckin.ChromeBuildProto.Channel getChannel() {
        return instance.getChannel();
      }
      /**
       * <pre>
       * The Channel (build type) of Chrome.
       * </pre>
       *
       * <code>optional .checkin_proto.ChromeBuildProto.Channel channel = 3;</code>
       */
      public Builder setChannel(checkin_proto.AndroidCheckin.ChromeBuildProto.Channel value) {
        copyOnWrite();
        instance.setChannel(value);
        return this;
      }
      /**
       * <pre>
       * The Channel (build type) of Chrome.
       * </pre>
       *
       * <code>optional .checkin_proto.ChromeBuildProto.Channel channel = 3;</code>
       */
      public Builder clearChannel() {
        copyOnWrite();
        instance.clearChannel();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:checkin_proto.ChromeBuildProto)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new checkin_proto.AndroidCheckin.ChromeBuildProto();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          checkin_proto.AndroidCheckin.ChromeBuildProto other = (checkin_proto.AndroidCheckin.ChromeBuildProto) arg1;
          platform_ = visitor.visitInt(hasPlatform(), platform_,
              other.hasPlatform(), other.platform_);
          chromeVersion_ = visitor.visitString(
              hasChromeVersion(), chromeVersion_,
              other.hasChromeVersion(), other.chromeVersion_);
          channel_ = visitor.visitInt(hasChannel(), channel_,
              other.hasChannel(), other.channel_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  int rawValue = input.readEnum();
                  checkin_proto.AndroidCheckin.ChromeBuildProto.Platform value = checkin_proto.AndroidCheckin.ChromeBuildProto.Platform.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(1, rawValue);
                  } else {
                    bitField0_ |= 0x00000001;
                    platform_ = rawValue;
                  }
                  break;
                }
                case 18: {
                  java.lang.String s = input.readString();
                  bitField0_ |= 0x00000002;
                  chromeVersion_ = s;
                  break;
                }
                case 24: {
                  int rawValue = input.readEnum();
                  checkin_proto.AndroidCheckin.ChromeBuildProto.Channel value = checkin_proto.AndroidCheckin.ChromeBuildProto.Channel.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(3, rawValue);
                  } else {
                    bitField0_ |= 0x00000004;
                    channel_ = rawValue;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (checkin_proto.AndroidCheckin.ChromeBuildProto.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:checkin_proto.ChromeBuildProto)
    private static final checkin_proto.AndroidCheckin.ChromeBuildProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ChromeBuildProto();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static checkin_proto.AndroidCheckin.ChromeBuildProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ChromeBuildProto> PARSER;

    public static com.google.protobuf.Parser<ChromeBuildProto> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface AndroidCheckinProtoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:checkin_proto.AndroidCheckinProto)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Miliseconds since the Unix epoch of the device's last successful checkin.
     * </pre>
     *
     * <code>optional int64 last_checkin_msec = 2;</code>
     */
    boolean hasLastCheckinMsec();
    /**
     * <pre>
     * Miliseconds since the Unix epoch of the device's last successful checkin.
     * </pre>
     *
     * <code>optional int64 last_checkin_msec = 2;</code>
     */
    long getLastCheckinMsec();

    /**
     * <pre>
     * The current MCC+MNC of the mobile device's current cell.
     * </pre>
     *
     * <code>optional string cell_operator = 6;</code>
     */
    boolean hasCellOperator();
    /**
     * <pre>
     * The current MCC+MNC of the mobile device's current cell.
     * </pre>
     *
     * <code>optional string cell_operator = 6;</code>
     */
    java.lang.String getCellOperator();
    /**
     * <pre>
     * The current MCC+MNC of the mobile device's current cell.
     * </pre>
     *
     * <code>optional string cell_operator = 6;</code>
     */
    com.google.protobuf.ByteString
        getCellOperatorBytes();

    /**
     * <pre>
     * The MCC+MNC of the SIM card (different from operator if the
     * device is roaming, for instance).
     * </pre>
     *
     * <code>optional string sim_operator = 7;</code>
     */
    boolean hasSimOperator();
    /**
     * <pre>
     * The MCC+MNC of the SIM card (different from operator if the
     * device is roaming, for instance).
     * </pre>
     *
     * <code>optional string sim_operator = 7;</code>
     */
    java.lang.String getSimOperator();
    /**
     * <pre>
     * The MCC+MNC of the SIM card (different from operator if the
     * device is roaming, for instance).
     * </pre>
     *
     * <code>optional string sim_operator = 7;</code>
     */
    com.google.protobuf.ByteString
        getSimOperatorBytes();

    /**
     * <pre>
     * The device's current roaming state (reported starting in eclair builds).
     * Currently one of "{,not}mobile-{,not}roaming", if it is present at all.
     * </pre>
     *
     * <code>optional string roaming = 8;</code>
     */
    boolean hasRoaming();
    /**
     * <pre>
     * The device's current roaming state (reported starting in eclair builds).
     * Currently one of "{,not}mobile-{,not}roaming", if it is present at all.
     * </pre>
     *
     * <code>optional string roaming = 8;</code>
     */
    java.lang.String getRoaming();
    /**
     * <pre>
     * The device's current roaming state (reported starting in eclair builds).
     * Currently one of "{,not}mobile-{,not}roaming", if it is present at all.
     * </pre>
     *
     * <code>optional string roaming = 8;</code>
     */
    com.google.protobuf.ByteString
        getRoamingBytes();

    /**
     * <pre>
     * For devices supporting multiple user profiles (which may be
     * supported starting in jellybean), the ordinal number of the
     * profile that is checking in.  This is 0 for the primary profile
     * (which can't be changed without wiping the device), and 1,2,3,...
     * for additional profiles (which can be added and deleted freely).
     * </pre>
     *
     * <code>optional int32 user_number = 9;</code>
     */
    boolean hasUserNumber();
    /**
     * <pre>
     * For devices supporting multiple user profiles (which may be
     * supported starting in jellybean), the ordinal number of the
     * profile that is checking in.  This is 0 for the primary profile
     * (which can't be changed without wiping the device), and 1,2,3,...
     * for additional profiles (which can be added and deleted freely).
     * </pre>
     *
     * <code>optional int32 user_number = 9;</code>
     */
    int getUserNumber();

    /**
     * <pre>
     * Class of device.  Indicates the type of build proto
     * (IosBuildProto/ChromeBuildProto/AndroidBuildProto)
     * That is included in this proto
     * </pre>
     *
     * <code>optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];</code>
     */
    boolean hasType();
    /**
     * <pre>
     * Class of device.  Indicates the type of build proto
     * (IosBuildProto/ChromeBuildProto/AndroidBuildProto)
     * That is included in this proto
     * </pre>
     *
     * <code>optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];</code>
     */
    checkin_proto.AndroidCheckin.DeviceType getType();

    /**
     * <pre>
     * For devices running MCS on Chrome, build-specific characteristics
     * of the browser.  There are no hardware aspects (except for ChromeOS).
     * This will only be populated for Chrome builds/ChromeOS devices
     * </pre>
     *
     * <code>optional .checkin_proto.ChromeBuildProto chrome_build = 13;</code>
     */
    boolean hasChromeBuild();
    /**
     * <pre>
     * For devices running MCS on Chrome, build-specific characteristics
     * of the browser.  There are no hardware aspects (except for ChromeOS).
     * This will only be populated for Chrome builds/ChromeOS devices
     * </pre>
     *
     * <code>optional .checkin_proto.ChromeBuildProto chrome_build = 13;</code>
     */
    checkin_proto.AndroidCheckin.ChromeBuildProto getChromeBuild();
  }
  /**
   * <pre>
   * Information sent by the device in a "checkin" request.
   * </pre>
   *
   * Protobuf type {@code checkin_proto.AndroidCheckinProto}
   */
  public  static final class AndroidCheckinProto extends
      com.google.protobuf.GeneratedMessageLite<
          AndroidCheckinProto, AndroidCheckinProto.Builder> implements
      // @@protoc_insertion_point(message_implements:checkin_proto.AndroidCheckinProto)
      AndroidCheckinProtoOrBuilder {
    private AndroidCheckinProto() {
      cellOperator_ = "";
      simOperator_ = "";
      roaming_ = "";
      type_ = 1;
    }
    private int bitField0_;
    public static final int LAST_CHECKIN_MSEC_FIELD_NUMBER = 2;
    private long lastCheckinMsec_;
    /**
     * <pre>
     * Miliseconds since the Unix epoch of the device's last successful checkin.
     * </pre>
     *
     * <code>optional int64 last_checkin_msec = 2;</code>
     */
    public boolean hasLastCheckinMsec() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * Miliseconds since the Unix epoch of the device's last successful checkin.
     * </pre>
     *
     * <code>optional int64 last_checkin_msec = 2;</code>
     */
    public long getLastCheckinMsec() {
      return lastCheckinMsec_;
    }
    /**
     * <pre>
     * Miliseconds since the Unix epoch of the device's last successful checkin.
     * </pre>
     *
     * <code>optional int64 last_checkin_msec = 2;</code>
     */
    private void setLastCheckinMsec(long value) {
      bitField0_ |= 0x00000001;
      lastCheckinMsec_ = value;
    }
    /**
     * <pre>
     * Miliseconds since the Unix epoch of the device's last successful checkin.
     * </pre>
     *
     * <code>optional int64 last_checkin_msec = 2;</code>
     */
    private void clearLastCheckinMsec() {
      bitField0_ = (bitField0_ & ~0x00000001);
      lastCheckinMsec_ = 0L;
    }

    public static final int CELL_OPERATOR_FIELD_NUMBER = 6;
    private java.lang.String cellOperator_;
    /**
     * <pre>
     * The current MCC+MNC of the mobile device's current cell.
     * </pre>
     *
     * <code>optional string cell_operator = 6;</code>
     */
    public boolean hasCellOperator() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * The current MCC+MNC of the mobile device's current cell.
     * </pre>
     *
     * <code>optional string cell_operator = 6;</code>
     */
    public java.lang.String getCellOperator() {
      return cellOperator_;
    }
    /**
     * <pre>
     * The current MCC+MNC of the mobile device's current cell.
     * </pre>
     *
     * <code>optional string cell_operator = 6;</code>
     */
    public com.google.protobuf.ByteString
        getCellOperatorBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(cellOperator_);
    }
    /**
     * <pre>
     * The current MCC+MNC of the mobile device's current cell.
     * </pre>
     *
     * <code>optional string cell_operator = 6;</code>
     */
    private void setCellOperator(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      cellOperator_ = value;
    }
    /**
     * <pre>
     * The current MCC+MNC of the mobile device's current cell.
     * </pre>
     *
     * <code>optional string cell_operator = 6;</code>
     */
    private void clearCellOperator() {
      bitField0_ = (bitField0_ & ~0x00000002);
      cellOperator_ = getDefaultInstance().getCellOperator();
    }
    /**
     * <pre>
     * The current MCC+MNC of the mobile device's current cell.
     * </pre>
     *
     * <code>optional string cell_operator = 6;</code>
     */
    private void setCellOperatorBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      cellOperator_ = value.toStringUtf8();
    }

    public static final int SIM_OPERATOR_FIELD_NUMBER = 7;
    private java.lang.String simOperator_;
    /**
     * <pre>
     * The MCC+MNC of the SIM card (different from operator if the
     * device is roaming, for instance).
     * </pre>
     *
     * <code>optional string sim_operator = 7;</code>
     */
    public boolean hasSimOperator() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * The MCC+MNC of the SIM card (different from operator if the
     * device is roaming, for instance).
     * </pre>
     *
     * <code>optional string sim_operator = 7;</code>
     */
    public java.lang.String getSimOperator() {
      return simOperator_;
    }
    /**
     * <pre>
     * The MCC+MNC of the SIM card (different from operator if the
     * device is roaming, for instance).
     * </pre>
     *
     * <code>optional string sim_operator = 7;</code>
     */
    public com.google.protobuf.ByteString
        getSimOperatorBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(simOperator_);
    }
    /**
     * <pre>
     * The MCC+MNC of the SIM card (different from operator if the
     * device is roaming, for instance).
     * </pre>
     *
     * <code>optional string sim_operator = 7;</code>
     */
    private void setSimOperator(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      simOperator_ = value;
    }
    /**
     * <pre>
     * The MCC+MNC of the SIM card (different from operator if the
     * device is roaming, for instance).
     * </pre>
     *
     * <code>optional string sim_operator = 7;</code>
     */
    private void clearSimOperator() {
      bitField0_ = (bitField0_ & ~0x00000004);
      simOperator_ = getDefaultInstance().getSimOperator();
    }
    /**
     * <pre>
     * The MCC+MNC of the SIM card (different from operator if the
     * device is roaming, for instance).
     * </pre>
     *
     * <code>optional string sim_operator = 7;</code>
     */
    private void setSimOperatorBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      simOperator_ = value.toStringUtf8();
    }

    public static final int ROAMING_FIELD_NUMBER = 8;
    private java.lang.String roaming_;
    /**
     * <pre>
     * The device's current roaming state (reported starting in eclair builds).
     * Currently one of "{,not}mobile-{,not}roaming", if it is present at all.
     * </pre>
     *
     * <code>optional string roaming = 8;</code>
     */
    public boolean hasRoaming() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <pre>
     * The device's current roaming state (reported starting in eclair builds).
     * Currently one of "{,not}mobile-{,not}roaming", if it is present at all.
     * </pre>
     *
     * <code>optional string roaming = 8;</code>
     */
    public java.lang.String getRoaming() {
      return roaming_;
    }
    /**
     * <pre>
     * The device's current roaming state (reported starting in eclair builds).
     * Currently one of "{,not}mobile-{,not}roaming", if it is present at all.
     * </pre>
     *
     * <code>optional string roaming = 8;</code>
     */
    public com.google.protobuf.ByteString
        getRoamingBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(roaming_);
    }
    /**
     * <pre>
     * The device's current roaming state (reported starting in eclair builds).
     * Currently one of "{,not}mobile-{,not}roaming", if it is present at all.
     * </pre>
     *
     * <code>optional string roaming = 8;</code>
     */
    private void setRoaming(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
      roaming_ = value;
    }
    /**
     * <pre>
     * The device's current roaming state (reported starting in eclair builds).
     * Currently one of "{,not}mobile-{,not}roaming", if it is present at all.
     * </pre>
     *
     * <code>optional string roaming = 8;</code>
     */
    private void clearRoaming() {
      bitField0_ = (bitField0_ & ~0x00000008);
      roaming_ = getDefaultInstance().getRoaming();
    }
    /**
     * <pre>
     * The device's current roaming state (reported starting in eclair builds).
     * Currently one of "{,not}mobile-{,not}roaming", if it is present at all.
     * </pre>
     *
     * <code>optional string roaming = 8;</code>
     */
    private void setRoamingBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
      roaming_ = value.toStringUtf8();
    }

    public static final int USER_NUMBER_FIELD_NUMBER = 9;
    private int userNumber_;
    /**
     * <pre>
     * For devices supporting multiple user profiles (which may be
     * supported starting in jellybean), the ordinal number of the
     * profile that is checking in.  This is 0 for the primary profile
     * (which can't be changed without wiping the device), and 1,2,3,...
     * for additional profiles (which can be added and deleted freely).
     * </pre>
     *
     * <code>optional int32 user_number = 9;</code>
     */
    public boolean hasUserNumber() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * For devices supporting multiple user profiles (which may be
     * supported starting in jellybean), the ordinal number of the
     * profile that is checking in.  This is 0 for the primary profile
     * (which can't be changed without wiping the device), and 1,2,3,...
     * for additional profiles (which can be added and deleted freely).
     * </pre>
     *
     * <code>optional int32 user_number = 9;</code>
     */
    public int getUserNumber() {
      return userNumber_;
    }
    /**
     * <pre>
     * For devices supporting multiple user profiles (which may be
     * supported starting in jellybean), the ordinal number of the
     * profile that is checking in.  This is 0 for the primary profile
     * (which can't be changed without wiping the device), and 1,2,3,...
     * for additional profiles (which can be added and deleted freely).
     * </pre>
     *
     * <code>optional int32 user_number = 9;</code>
     */
    private void setUserNumber(int value) {
      bitField0_ |= 0x00000010;
      userNumber_ = value;
    }
    /**
     * <pre>
     * For devices supporting multiple user profiles (which may be
     * supported starting in jellybean), the ordinal number of the
     * profile that is checking in.  This is 0 for the primary profile
     * (which can't be changed without wiping the device), and 1,2,3,...
     * for additional profiles (which can be added and deleted freely).
     * </pre>
     *
     * <code>optional int32 user_number = 9;</code>
     */
    private void clearUserNumber() {
      bitField0_ = (bitField0_ & ~0x00000010);
      userNumber_ = 0;
    }

    public static final int TYPE_FIELD_NUMBER = 12;
    private int type_;
    /**
     * <pre>
     * Class of device.  Indicates the type of build proto
     * (IosBuildProto/ChromeBuildProto/AndroidBuildProto)
     * That is included in this proto
     * </pre>
     *
     * <code>optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * Class of device.  Indicates the type of build proto
     * (IosBuildProto/ChromeBuildProto/AndroidBuildProto)
     * That is included in this proto
     * </pre>
     *
     * <code>optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];</code>
     */
    public checkin_proto.AndroidCheckin.DeviceType getType() {
      checkin_proto.AndroidCheckin.DeviceType result = checkin_proto.AndroidCheckin.DeviceType.forNumber(type_);
      return result == null ? checkin_proto.AndroidCheckin.DeviceType.DEVICE_ANDROID_OS : result;
    }
    /**
     * <pre>
     * Class of device.  Indicates the type of build proto
     * (IosBuildProto/ChromeBuildProto/AndroidBuildProto)
     * That is included in this proto
     * </pre>
     *
     * <code>optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];</code>
     */
    private void setType(checkin_proto.AndroidCheckin.DeviceType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000020;
      type_ = value.getNumber();
    }
    /**
     * <pre>
     * Class of device.  Indicates the type of build proto
     * (IosBuildProto/ChromeBuildProto/AndroidBuildProto)
     * That is included in this proto
     * </pre>
     *
     * <code>optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];</code>
     */
    private void clearType() {
      bitField0_ = (bitField0_ & ~0x00000020);
      type_ = 1;
    }

    public static final int CHROME_BUILD_FIELD_NUMBER = 13;
    private checkin_proto.AndroidCheckin.ChromeBuildProto chromeBuild_;
    /**
     * <pre>
     * For devices running MCS on Chrome, build-specific characteristics
     * of the browser.  There are no hardware aspects (except for ChromeOS).
     * This will only be populated for Chrome builds/ChromeOS devices
     * </pre>
     *
     * <code>optional .checkin_proto.ChromeBuildProto chrome_build = 13;</code>
     */
    public boolean hasChromeBuild() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <pre>
     * For devices running MCS on Chrome, build-specific characteristics
     * of the browser.  There are no hardware aspects (except for ChromeOS).
     * This will only be populated for Chrome builds/ChromeOS devices
     * </pre>
     *
     * <code>optional .checkin_proto.ChromeBuildProto chrome_build = 13;</code>
     */
    public checkin_proto.AndroidCheckin.ChromeBuildProto getChromeBuild() {
      return chromeBuild_ == null ? checkin_proto.AndroidCheckin.ChromeBuildProto.getDefaultInstance() : chromeBuild_;
    }
    /**
     * <pre>
     * For devices running MCS on Chrome, build-specific characteristics
     * of the browser.  There are no hardware aspects (except for ChromeOS).
     * This will only be populated for Chrome builds/ChromeOS devices
     * </pre>
     *
     * <code>optional .checkin_proto.ChromeBuildProto chrome_build = 13;</code>
     */
    private void setChromeBuild(checkin_proto.AndroidCheckin.ChromeBuildProto value) {
      if (value == null) {
        throw new NullPointerException();
      }
      chromeBuild_ = value;
      bitField0_ |= 0x00000040;
      }
    /**
     * <pre>
     * For devices running MCS on Chrome, build-specific characteristics
     * of the browser.  There are no hardware aspects (except for ChromeOS).
     * This will only be populated for Chrome builds/ChromeOS devices
     * </pre>
     *
     * <code>optional .checkin_proto.ChromeBuildProto chrome_build = 13;</code>
     */
    private void setChromeBuild(
        checkin_proto.AndroidCheckin.ChromeBuildProto.Builder builderForValue) {
      chromeBuild_ = builderForValue.build();
      bitField0_ |= 0x00000040;
    }
    /**
     * <pre>
     * For devices running MCS on Chrome, build-specific characteristics
     * of the browser.  There are no hardware aspects (except for ChromeOS).
     * This will only be populated for Chrome builds/ChromeOS devices
     * </pre>
     *
     * <code>optional .checkin_proto.ChromeBuildProto chrome_build = 13;</code>
     */
    private void mergeChromeBuild(checkin_proto.AndroidCheckin.ChromeBuildProto value) {
      if (chromeBuild_ != null &&
          chromeBuild_ != checkin_proto.AndroidCheckin.ChromeBuildProto.getDefaultInstance()) {
        chromeBuild_ =
          checkin_proto.AndroidCheckin.ChromeBuildProto.newBuilder(chromeBuild_).mergeFrom(value).buildPartial();
      } else {
        chromeBuild_ = value;
      }
      bitField0_ |= 0x00000040;
    }
    /**
     * <pre>
     * For devices running MCS on Chrome, build-specific characteristics
     * of the browser.  There are no hardware aspects (except for ChromeOS).
     * This will only be populated for Chrome builds/ChromeOS devices
     * </pre>
     *
     * <code>optional .checkin_proto.ChromeBuildProto chrome_build = 13;</code>
     */
    private void clearChromeBuild() {  chromeBuild_ = null;
      bitField0_ = (bitField0_ & ~0x00000040);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(2, lastCheckinMsec_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeString(6, getCellOperator());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeString(7, getSimOperator());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeString(8, getRoaming());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(9, userNumber_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(12, type_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(13, getChromeBuild());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, lastCheckinMsec_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(6, getCellOperator());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(7, getSimOperator());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(8, getRoaming());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, userNumber_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(12, type_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, getChromeBuild());
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static checkin_proto.AndroidCheckin.AndroidCheckinProto parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static checkin_proto.AndroidCheckin.AndroidCheckinProto parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static checkin_proto.AndroidCheckin.AndroidCheckinProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static checkin_proto.AndroidCheckin.AndroidCheckinProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static checkin_proto.AndroidCheckin.AndroidCheckinProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static checkin_proto.AndroidCheckin.AndroidCheckinProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static checkin_proto.AndroidCheckin.AndroidCheckinProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static checkin_proto.AndroidCheckin.AndroidCheckinProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static checkin_proto.AndroidCheckin.AndroidCheckinProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static checkin_proto.AndroidCheckin.AndroidCheckinProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static checkin_proto.AndroidCheckin.AndroidCheckinProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static checkin_proto.AndroidCheckin.AndroidCheckinProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.createBuilder();
    }
    public static Builder newBuilder(checkin_proto.AndroidCheckin.AndroidCheckinProto prototype) {
      return (Builder) DEFAULT_INSTANCE.createBuilder(prototype);
    }

    /**
     * <pre>
     * Information sent by the device in a "checkin" request.
     * </pre>
     *
     * Protobuf type {@code checkin_proto.AndroidCheckinProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          checkin_proto.AndroidCheckin.AndroidCheckinProto, Builder> implements
        // @@protoc_insertion_point(builder_implements:checkin_proto.AndroidCheckinProto)
        checkin_proto.AndroidCheckin.AndroidCheckinProtoOrBuilder {
      // Construct using checkin_proto.AndroidCheckin.AndroidCheckinProto.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Miliseconds since the Unix epoch of the device's last successful checkin.
       * </pre>
       *
       * <code>optional int64 last_checkin_msec = 2;</code>
       */
      public boolean hasLastCheckinMsec() {
        return instance.hasLastCheckinMsec();
      }
      /**
       * <pre>
       * Miliseconds since the Unix epoch of the device's last successful checkin.
       * </pre>
       *
       * <code>optional int64 last_checkin_msec = 2;</code>
       */
      public long getLastCheckinMsec() {
        return instance.getLastCheckinMsec();
      }
      /**
       * <pre>
       * Miliseconds since the Unix epoch of the device's last successful checkin.
       * </pre>
       *
       * <code>optional int64 last_checkin_msec = 2;</code>
       */
      public Builder setLastCheckinMsec(long value) {
        copyOnWrite();
        instance.setLastCheckinMsec(value);
        return this;
      }
      /**
       * <pre>
       * Miliseconds since the Unix epoch of the device's last successful checkin.
       * </pre>
       *
       * <code>optional int64 last_checkin_msec = 2;</code>
       */
      public Builder clearLastCheckinMsec() {
        copyOnWrite();
        instance.clearLastCheckinMsec();
        return this;
      }

      /**
       * <pre>
       * The current MCC+MNC of the mobile device's current cell.
       * </pre>
       *
       * <code>optional string cell_operator = 6;</code>
       */
      public boolean hasCellOperator() {
        return instance.hasCellOperator();
      }
      /**
       * <pre>
       * The current MCC+MNC of the mobile device's current cell.
       * </pre>
       *
       * <code>optional string cell_operator = 6;</code>
       */
      public java.lang.String getCellOperator() {
        return instance.getCellOperator();
      }
      /**
       * <pre>
       * The current MCC+MNC of the mobile device's current cell.
       * </pre>
       *
       * <code>optional string cell_operator = 6;</code>
       */
      public com.google.protobuf.ByteString
          getCellOperatorBytes() {
        return instance.getCellOperatorBytes();
      }
      /**
       * <pre>
       * The current MCC+MNC of the mobile device's current cell.
       * </pre>
       *
       * <code>optional string cell_operator = 6;</code>
       */
      public Builder setCellOperator(
          java.lang.String value) {
        copyOnWrite();
        instance.setCellOperator(value);
        return this;
      }
      /**
       * <pre>
       * The current MCC+MNC of the mobile device's current cell.
       * </pre>
       *
       * <code>optional string cell_operator = 6;</code>
       */
      public Builder clearCellOperator() {
        copyOnWrite();
        instance.clearCellOperator();
        return this;
      }
      /**
       * <pre>
       * The current MCC+MNC of the mobile device's current cell.
       * </pre>
       *
       * <code>optional string cell_operator = 6;</code>
       */
      public Builder setCellOperatorBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setCellOperatorBytes(value);
        return this;
      }

      /**
       * <pre>
       * The MCC+MNC of the SIM card (different from operator if the
       * device is roaming, for instance).
       * </pre>
       *
       * <code>optional string sim_operator = 7;</code>
       */
      public boolean hasSimOperator() {
        return instance.hasSimOperator();
      }
      /**
       * <pre>
       * The MCC+MNC of the SIM card (different from operator if the
       * device is roaming, for instance).
       * </pre>
       *
       * <code>optional string sim_operator = 7;</code>
       */
      public java.lang.String getSimOperator() {
        return instance.getSimOperator();
      }
      /**
       * <pre>
       * The MCC+MNC of the SIM card (different from operator if the
       * device is roaming, for instance).
       * </pre>
       *
       * <code>optional string sim_operator = 7;</code>
       */
      public com.google.protobuf.ByteString
          getSimOperatorBytes() {
        return instance.getSimOperatorBytes();
      }
      /**
       * <pre>
       * The MCC+MNC of the SIM card (different from operator if the
       * device is roaming, for instance).
       * </pre>
       *
       * <code>optional string sim_operator = 7;</code>
       */
      public Builder setSimOperator(
          java.lang.String value) {
        copyOnWrite();
        instance.setSimOperator(value);
        return this;
      }
      /**
       * <pre>
       * The MCC+MNC of the SIM card (different from operator if the
       * device is roaming, for instance).
       * </pre>
       *
       * <code>optional string sim_operator = 7;</code>
       */
      public Builder clearSimOperator() {
        copyOnWrite();
        instance.clearSimOperator();
        return this;
      }
      /**
       * <pre>
       * The MCC+MNC of the SIM card (different from operator if the
       * device is roaming, for instance).
       * </pre>
       *
       * <code>optional string sim_operator = 7;</code>
       */
      public Builder setSimOperatorBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSimOperatorBytes(value);
        return this;
      }

      /**
       * <pre>
       * The device's current roaming state (reported starting in eclair builds).
       * Currently one of "{,not}mobile-{,not}roaming", if it is present at all.
       * </pre>
       *
       * <code>optional string roaming = 8;</code>
       */
      public boolean hasRoaming() {
        return instance.hasRoaming();
      }
      /**
       * <pre>
       * The device's current roaming state (reported starting in eclair builds).
       * Currently one of "{,not}mobile-{,not}roaming", if it is present at all.
       * </pre>
       *
       * <code>optional string roaming = 8;</code>
       */
      public java.lang.String getRoaming() {
        return instance.getRoaming();
      }
      /**
       * <pre>
       * The device's current roaming state (reported starting in eclair builds).
       * Currently one of "{,not}mobile-{,not}roaming", if it is present at all.
       * </pre>
       *
       * <code>optional string roaming = 8;</code>
       */
      public com.google.protobuf.ByteString
          getRoamingBytes() {
        return instance.getRoamingBytes();
      }
      /**
       * <pre>
       * The device's current roaming state (reported starting in eclair builds).
       * Currently one of "{,not}mobile-{,not}roaming", if it is present at all.
       * </pre>
       *
       * <code>optional string roaming = 8;</code>
       */
      public Builder setRoaming(
          java.lang.String value) {
        copyOnWrite();
        instance.setRoaming(value);
        return this;
      }
      /**
       * <pre>
       * The device's current roaming state (reported starting in eclair builds).
       * Currently one of "{,not}mobile-{,not}roaming", if it is present at all.
       * </pre>
       *
       * <code>optional string roaming = 8;</code>
       */
      public Builder clearRoaming() {
        copyOnWrite();
        instance.clearRoaming();
        return this;
      }
      /**
       * <pre>
       * The device's current roaming state (reported starting in eclair builds).
       * Currently one of "{,not}mobile-{,not}roaming", if it is present at all.
       * </pre>
       *
       * <code>optional string roaming = 8;</code>
       */
      public Builder setRoamingBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setRoamingBytes(value);
        return this;
      }

      /**
       * <pre>
       * For devices supporting multiple user profiles (which may be
       * supported starting in jellybean), the ordinal number of the
       * profile that is checking in.  This is 0 for the primary profile
       * (which can't be changed without wiping the device), and 1,2,3,...
       * for additional profiles (which can be added and deleted freely).
       * </pre>
       *
       * <code>optional int32 user_number = 9;</code>
       */
      public boolean hasUserNumber() {
        return instance.hasUserNumber();
      }
      /**
       * <pre>
       * For devices supporting multiple user profiles (which may be
       * supported starting in jellybean), the ordinal number of the
       * profile that is checking in.  This is 0 for the primary profile
       * (which can't be changed without wiping the device), and 1,2,3,...
       * for additional profiles (which can be added and deleted freely).
       * </pre>
       *
       * <code>optional int32 user_number = 9;</code>
       */
      public int getUserNumber() {
        return instance.getUserNumber();
      }
      /**
       * <pre>
       * For devices supporting multiple user profiles (which may be
       * supported starting in jellybean), the ordinal number of the
       * profile that is checking in.  This is 0 for the primary profile
       * (which can't be changed without wiping the device), and 1,2,3,...
       * for additional profiles (which can be added and deleted freely).
       * </pre>
       *
       * <code>optional int32 user_number = 9;</code>
       */
      public Builder setUserNumber(int value) {
        copyOnWrite();
        instance.setUserNumber(value);
        return this;
      }
      /**
       * <pre>
       * For devices supporting multiple user profiles (which may be
       * supported starting in jellybean), the ordinal number of the
       * profile that is checking in.  This is 0 for the primary profile
       * (which can't be changed without wiping the device), and 1,2,3,...
       * for additional profiles (which can be added and deleted freely).
       * </pre>
       *
       * <code>optional int32 user_number = 9;</code>
       */
      public Builder clearUserNumber() {
        copyOnWrite();
        instance.clearUserNumber();
        return this;
      }

      /**
       * <pre>
       * Class of device.  Indicates the type of build proto
       * (IosBuildProto/ChromeBuildProto/AndroidBuildProto)
       * That is included in this proto
       * </pre>
       *
       * <code>optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];</code>
       */
      public boolean hasType() {
        return instance.hasType();
      }
      /**
       * <pre>
       * Class of device.  Indicates the type of build proto
       * (IosBuildProto/ChromeBuildProto/AndroidBuildProto)
       * That is included in this proto
       * </pre>
       *
       * <code>optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];</code>
       */
      public checkin_proto.AndroidCheckin.DeviceType getType() {
        return instance.getType();
      }
      /**
       * <pre>
       * Class of device.  Indicates the type of build proto
       * (IosBuildProto/ChromeBuildProto/AndroidBuildProto)
       * That is included in this proto
       * </pre>
       *
       * <code>optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];</code>
       */
      public Builder setType(checkin_proto.AndroidCheckin.DeviceType value) {
        copyOnWrite();
        instance.setType(value);
        return this;
      }
      /**
       * <pre>
       * Class of device.  Indicates the type of build proto
       * (IosBuildProto/ChromeBuildProto/AndroidBuildProto)
       * That is included in this proto
       * </pre>
       *
       * <code>optional .checkin_proto.DeviceType type = 12 [default = DEVICE_ANDROID_OS];</code>
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }

      /**
       * <pre>
       * For devices running MCS on Chrome, build-specific characteristics
       * of the browser.  There are no hardware aspects (except for ChromeOS).
       * This will only be populated for Chrome builds/ChromeOS devices
       * </pre>
       *
       * <code>optional .checkin_proto.ChromeBuildProto chrome_build = 13;</code>
       */
      public boolean hasChromeBuild() {
        return instance.hasChromeBuild();
      }
      /**
       * <pre>
       * For devices running MCS on Chrome, build-specific characteristics
       * of the browser.  There are no hardware aspects (except for ChromeOS).
       * This will only be populated for Chrome builds/ChromeOS devices
       * </pre>
       *
       * <code>optional .checkin_proto.ChromeBuildProto chrome_build = 13;</code>
       */
      public checkin_proto.AndroidCheckin.ChromeBuildProto getChromeBuild() {
        return instance.getChromeBuild();
      }
      /**
       * <pre>
       * For devices running MCS on Chrome, build-specific characteristics
       * of the browser.  There are no hardware aspects (except for ChromeOS).
       * This will only be populated for Chrome builds/ChromeOS devices
       * </pre>
       *
       * <code>optional .checkin_proto.ChromeBuildProto chrome_build = 13;</code>
       */
      public Builder setChromeBuild(checkin_proto.AndroidCheckin.ChromeBuildProto value) {
        copyOnWrite();
        instance.setChromeBuild(value);
        return this;
        }
      /**
       * <pre>
       * For devices running MCS on Chrome, build-specific characteristics
       * of the browser.  There are no hardware aspects (except for ChromeOS).
       * This will only be populated for Chrome builds/ChromeOS devices
       * </pre>
       *
       * <code>optional .checkin_proto.ChromeBuildProto chrome_build = 13;</code>
       */
      public Builder setChromeBuild(
          checkin_proto.AndroidCheckin.ChromeBuildProto.Builder builderForValue) {
        copyOnWrite();
        instance.setChromeBuild(builderForValue);
        return this;
      }
      /**
       * <pre>
       * For devices running MCS on Chrome, build-specific characteristics
       * of the browser.  There are no hardware aspects (except for ChromeOS).
       * This will only be populated for Chrome builds/ChromeOS devices
       * </pre>
       *
       * <code>optional .checkin_proto.ChromeBuildProto chrome_build = 13;</code>
       */
      public Builder mergeChromeBuild(checkin_proto.AndroidCheckin.ChromeBuildProto value) {
        copyOnWrite();
        instance.mergeChromeBuild(value);
        return this;
      }
      /**
       * <pre>
       * For devices running MCS on Chrome, build-specific characteristics
       * of the browser.  There are no hardware aspects (except for ChromeOS).
       * This will only be populated for Chrome builds/ChromeOS devices
       * </pre>
       *
       * <code>optional .checkin_proto.ChromeBuildProto chrome_build = 13;</code>
       */
      public Builder clearChromeBuild() {  copyOnWrite();
        instance.clearChromeBuild();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:checkin_proto.AndroidCheckinProto)
    }
    @java.lang.SuppressWarnings({"unchecked", "fallthrough"})
    protected final java.lang.Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        java.lang.Object arg0, java.lang.Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new checkin_proto.AndroidCheckin.AndroidCheckinProto();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          checkin_proto.AndroidCheckin.AndroidCheckinProto other = (checkin_proto.AndroidCheckin.AndroidCheckinProto) arg1;
          lastCheckinMsec_ = visitor.visitLong(
              hasLastCheckinMsec(), lastCheckinMsec_,
              other.hasLastCheckinMsec(), other.lastCheckinMsec_);
          cellOperator_ = visitor.visitString(
              hasCellOperator(), cellOperator_,
              other.hasCellOperator(), other.cellOperator_);
          simOperator_ = visitor.visitString(
              hasSimOperator(), simOperator_,
              other.hasSimOperator(), other.simOperator_);
          roaming_ = visitor.visitString(
              hasRoaming(), roaming_,
              other.hasRoaming(), other.roaming_);
          userNumber_ = visitor.visitInt(
              hasUserNumber(), userNumber_,
              other.hasUserNumber(), other.userNumber_);
          type_ = visitor.visitInt(hasType(), type_,
              other.hasType(), other.type_);
          chromeBuild_ = visitor.visitMessage(chromeBuild_, other.chromeBuild_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 16: {
                  bitField0_ |= 0x00000001;
                  lastCheckinMsec_ = input.readInt64();
                  break;
                }
                case 50: {
                  java.lang.String s = input.readString();
                  bitField0_ |= 0x00000002;
                  cellOperator_ = s;
                  break;
                }
                case 58: {
                  java.lang.String s = input.readString();
                  bitField0_ |= 0x00000004;
                  simOperator_ = s;
                  break;
                }
                case 66: {
                  java.lang.String s = input.readString();
                  bitField0_ |= 0x00000008;
                  roaming_ = s;
                  break;
                }
                case 72: {
                  bitField0_ |= 0x00000010;
                  userNumber_ = input.readInt32();
                  break;
                }
                case 96: {
                  int rawValue = input.readEnum();
                  checkin_proto.AndroidCheckin.DeviceType value = checkin_proto.AndroidCheckin.DeviceType.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(12, rawValue);
                  } else {
                    bitField0_ |= 0x00000020;
                    type_ = rawValue;
                  }
                  break;
                }
                case 106: {
                  checkin_proto.AndroidCheckin.ChromeBuildProto.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000040) == 0x00000040)) {
                    subBuilder = chromeBuild_.toBuilder();
                  }
                  chromeBuild_ = input.readMessage(checkin_proto.AndroidCheckin.ChromeBuildProto.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(chromeBuild_);
                    chromeBuild_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000040;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        // fall through
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (checkin_proto.AndroidCheckin.AndroidCheckinProto.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
      }
      case GET_MEMOIZED_IS_INITIALIZED: {
        return (byte) 1;
      }
      case SET_MEMOIZED_IS_INITIALIZED: {
        return null;
      }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:checkin_proto.AndroidCheckinProto)
    private static final checkin_proto.AndroidCheckin.AndroidCheckinProto DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new AndroidCheckinProto();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static checkin_proto.AndroidCheckin.AndroidCheckinProto getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<AndroidCheckinProto> PARSER;

    public static com.google.protobuf.Parser<AndroidCheckinProto> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
